const express = require("express");
const path = require("path");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");

const app = express();
app.use(express.json());
const dbPath = path.join(__dirname, "todoApplication.db");
let db = null;
const initializeDBAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,

      driver: sqlite3.Database,
    });

    app.listen(3000, () => {
      console.log("Server Running at http://localhost:3000/");
    });
  } catch (e) {
    console.log(`DB Error: '${e.message}'`);

    process.exit(1);
  }
};

initializeDBAndServer();

const hasPriorityAndStatus = (requestQuery) => {
  return (
    requestQuery.priority !== undefined && requestQuery.status !== undefined
  );
};
const hasPriority = (requestQuery) => {
  return requestQuery.priority !== undefined;
};

const hasStatusProperty = (requestQuery) => {
  return requestQuery.status !== undefined;
};

app.get("/todos/", async (request, response) => {
  const { search_q = "", priority, status } = requestQuery;
  let data = null;
  let getTodoQuery = "";
  switch (true) {
    case hasPriorityAndStatus(request.Query):
      getTodoQuery = `
          select * from todo where todo like '%${search_q}%'
           and priority ='${priority}' 
          and  status = '${status}';`;
      break;
    case hasPriority(request.Query):
      getTodoQuery = `
          select * from todo where todo like '%${search_q}%' and priority = '${priority}';`;
      break;
    case hasStatusProperty(request.Query):
      getTodoQuery = `
          select * from todo where todo like '%${search_q}%' and status ='${status}';`;
      break;

    default:
      getTodoQuery = `
        select * from todo where todo like '%${search_q}%';`;
      break;
  }
  data = await db.all(getTodoQuery);
  response.send(data);
});

app.get("/todos/:todoId", async (request, response) => {
  const { id } = request.params;
  const getTodoIdQuery = `
    select * from todo where id='${id};`;
  const user = await db.get(getTodoIdQuery);
  response.send(user);
});

app.post("/todos/", async (request, response) => {
  const { id, todo, priority, status } = request.body;
  const insertQuery = `
    insert into todo (id,todo,priority,status) values (${id},'${todo}','${priority}','${status}';`;

  await db.run(insertQuery);
  response.send("Todo Successfully Ad");
});

module.exports = app;
